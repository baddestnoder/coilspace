const express = require("express");
const customMiddleware = require("./customMiddleware.js");
const CoilDB = require("./generateCoil/generateCoilSchema.js");
const AccountDB = require("./register/registerSchema.js");
const HistoryDB = require("./history/historySchema.js");






const router = express.Router();




router.get("/deposit", async(req, res)=>{
	try{
		const validAccount = await customMiddleware.getCookie(req, res);

		if(validAccount){
			const rate = await customMiddleware.rate_by_country(validAccount.country);
			res.render("deposit.ejs", {data: validAccount, rate});
		}else{
			res.cookie("signature", "", {httpOnly: true, maxAge: 0, expiresIn: 0});
			res.redirect("/login");
		};
	}catch(error){
		customMiddleware.logger(error);
	};
});









router.post("/deposit", async (req, res)=>{

	const startTime = Date.now();

	try{

		const allow = customMiddleware.sanitized(req.body.coil_id);

		if(allow){
			const validAccount = await customMiddleware.getCookie(req, res);
			if(validAccount){
			
				const validCoil = await CoilDB.findOne({coil_id: req.body.coil_id});

				if(validCoil){
					if(validCoil.used === true){
						if(validCoil.used_by === validAccount._id.toString()){
							res.status(401).json({message: "This coil has already been used by you."});
						}else{
							res.status(401).json({message: "This coil has already been used by another user."});
						}
					}else if(validCoil.coil_id.includes("agent") && validAccount.email != "oo@gmail.com"){
							res.status(401).json({message: "This coil was generated by an agent and can't be deposited; you can only invest it or sell it to investors."});
					}else if(validAccount.agent === false){
							res.status(401).json({message: "This coil can't be deposited to your wallet because you're operating a Trader's Account, you have to sell it to an Agent." });
					}else{
						const rate = await customMiddleware.rate_by_country(validAccount.country);
						const unit = parseFloat(req.body.coil_id.split("-")[1]);

						let percentage = 0;
						if(validCoil.coil_id.includes("bulk")){
							percentage = 10
						}else{
							percentage = 12
						}

						const amount_deposited = unit*rate/100*percentage+unit*rate



						await CoilDB.findOneAndUpdate(
							{coil_id: req.body.coil_id},
							{$set: {used: true, used_by: validAccount._id.toString()}},
							{new: true}
						);


						await AccountDB.findOneAndUpdate(
							{_id: validAccount._id},
							{$inc: {wallet_balance: amount_deposited}},
							{new: true}
						);

						//We update paid after wallet is credited, be the sure that network did not fail... If paid is still false and a customer complains of his wallet not funded, we do it manually.
						await CoilDB.findOneAndUpdate(
							{coil_id: req.body.coil_id},
							{$set: {paid: true}},
							{new: true}
						);

						await new HistoryDB({
							type: "Deposit",
							amount: amount_deposited,
							owner_id: validAccount._id.toString(),
							date: req.body.date
						}).save();

						res.status(200).json({message: "successful", amount_deposited})
					}

				}else{
					res.status(401).json({message: "Invalid Coil ID"});
				}
				
			}else{
				res.cookie("signature", "", {httpOnly: true, maxAge: 0, expiresIn: 0});
				res.status(401).json({message: "login needed"});
			}

		}else{
			res.status(401).json({message: "Invalid Coil ID"});
		};
	}catch(error){
		const error_second = (Date.now - startTime) / 1000;
		customMiddleware.catchError(error, res, error_second);
	}
});








module.exports = router;