<!DOCTYPE html>
<html>
<head>
	<%-include("./partialTemplate/meta.ejs")%>
	<title>CoilSpace | Your Coil</title>


	<style type="text/css">
		
		@media screen and (min-width: 200px){

			main{
				background-color: rgb(10, 15, 30);
			}





			.body_overlay{
				bottom: 0; top: 0; left: 0; right: 0;	
				z-index: 3;
				width: 100%;
				opacity: 0;
				display: none;
				background-color: black;
				position: absolute;
			}




			main{
				padding-top: 50px;
				padding-bottom: 130px;
			}

			.coil_section{
				width: 170px;
				height: 170px;
				border-radius: 50%;
				text-align: center;
				margin: 30px auto 0 auto;
				border-bottom: 2px solid rgb(50, 0, 40);
				border-top: 2px solid rgb(0, 255, 100);
				box-shadow: 0 0 30px 5px rgb(100, 230, 240);
				background-image: linear-gradient(1deg, rgb(60, 0, 50)30%, rgb(0, 230, 70)100%);
			}


			main i{
				margin-top: 10px;
				font-size: 1.9rem;
				display: block;
				color: rgb(90, 0, 100);
				text-align: center;
			}

			h1{
				margin: 40px auto 0 auto;
				color: white;
				font-size: 1rem;
				font-weight: 400;
			}


			.current_value{
				font-weight: 600;
				font-size: 1.5rem;
				color: white;
			}

			.unit{
				width: 60%;
				color: rgb(200, 200, 200);
				margin: 20px auto 0 auto;
				padding: 6px 0;
				border-radius: 5px;
				box-shadow: 0 0 4px 1px rgb(50, 100, 100);
			}








			.detail_section{
				width: 90%;
				margin: 50px auto 0 auto;
				display: grid;
				grid-template-columns: 1fr 1fr;
				background-color: rgb(0, 30, 70);
				padding: 30px 0 10px 0;
				border-radius: 0 0 20px 20px;
			}



			.detail_section p{
				text-align: center;
				color: rgb(180, 180, 180);
				border-right: 1px solid rgb(30, 50, 110);
			}

			.detail_section p+p{
				border: none;
			}

			.detail_section p span{
				color: white;
			}


			.withdraw{
				display: block;
				width: 70%;
				margin: 40px auto 0 auto;
				padding: 12px 0;
				color: white;
				background-color: rgb(0, 130, 50);
				text-align: center;
				border-radius: 5px;
				font-size: 1rem;
				border: none;
			}




			main form{
				background-color: white;
				position: fixed;
				bottom: 0;
				width: 100%;
				z-index: -1;
				padding: 30px 40px 60px 40px;
				box-sizing: border-box;
				border-radius: 20px 20px 0 0;
			}




			main form h2{
				text-align: center;
			}

			main form p{
				margin-top: 20px;
				font-size: 1.1rem;
				text-align: left;
				line-height: 1.7;
				color: black;
			}


			main form input{
				box-sizing: border-box;
				margin: 30px auto 0 auto;
				display: block;
				width: 100%;
				height: 50px;
				border-radius: 8px;
				border: 1px solid rgb(50, 50, 50);
				padding: 0 0 0 15px;
			}


			main form div{
				width: 100%;
				display: grid;
				grid-template-columns: 1fr 1fr;
			}


			main form button{
				margin: 30px 0 0 0;
				display: block;
				background-color: rgb(150, 0, 0);
				color: white;
				padding: 15px 0;
				border: none;
				border-radius: 6px;
				width: 80%;
			}


			main form div button+button{
				background-color: rgb(0, 100, 50);
				margin-left: auto;
			}
		}












		@media screen and (min-width: 300px){
			
			h1{
				margin-top: 35px;
				font-size: 0.9rem;
			}


			.current_value{
				font-size: 1.6rem;
			}

			.unit{
				font-size: 0.9rem;
			}




			.detail_section{
				width: 80%;
			}


			.withdraw{
				padding: 14px 0;
			}

		}







		@media screen and (min-width: 350px){

			.coil_section{
				width: 200px;
				height: 200px;
			}


			

			h1{
				margin-top: 45px;
			}

			.withdraw{
				width: 60%;
				padding: 16px 0;
			}

		}
	</style>



</head>






<body data-currency="<%=data.currency%>" data-currency_format="<%=data.format%>">

	<div class="body_overlay"></div>


	<%
		const currencyFormatter = new Intl.NumberFormat(data.currency_format, {
		    style: 'currency',
		    currency: data.currency
		});
	%>

	<main>
		
		<section class="coil_section">
			<i class="fa-solid fa-arrow-up-right-dots"></i>
			<h1>Current Value </h1>
			<p class="current_value"><%=currencyFormatter.format(isMyCoil.value * isMyCoil.unit * rate)%></p>
			<p class="unit"><%=isMyCoil.unit%> Coil Units</p>
		</section>


		
		<div class="detail_section">
			<p>Invested Amount <br> <span><%=currencyFormatter.format(isMyCoil.invested_amount)%></span></p>
			<p>Date <br> <span>23/2/2023</span> </p>
		</div>

		<button data-coil_id="<%=isMyCoil.coil_id%>" class="withdraw">Withdraw to Wallet</button>







		<form>

			<h2>Notice!</h2>
			<p>By clicking "Continue", you have agreed to terminate this investment and <%=currencyFormatter.format(isMyCoil.value * isMyCoil.unit * rate)%> will be added to your wallet</p>

			<input type="password" name="password" placeholder="Enter your Password">

			<div>
				<button class="form_cancel">Cancel</button>
				<button class="continue">Continue</button>
			</div>
		</form>




		<section style="display: none;" class="alert_wrapper">
			<i class="alert_icon fa-solid fa-circle-exclamation"></i>
			<p class="alert_p"></p>
			<button class="alert_cancel">Okay</button>
		</section>
	</main>


	<%-include("./partialTemplate/footer.ejs")%>




	<script type="text/javascript">


		const form_cancel = document.querySelector(".form_cancel");
		const withdraw_button = document.querySelector(".withdraw");
		const continue_button = document.querySelector(".continue");
		const body = document.querySelector("body");
		const form = document.querySelector("form");
		const body_overlay = document.querySelector(".body_overlay");
		const alert_p = document.querySelector(".alert_p");
		const alert_icon = document.querySelector(".alert_icon");
		const alert_cancel = document.querySelector(".alert_cancel");
		const alert_wrapper = document.querySelector(".alert_wrapper");



		const display_alert = ()=>{
			body_overlay.style.display = "block";
			body_overlay.style.opacity = "0.8";
			alert_wrapper.style.display = "block";

			const scrollY = window.scrollY || window.pageYOffset;
		  	const topPosition = 100+scrollY + 'px';
		    alert_wrapper.style.top = topPosition;
		}


		const closs_alert = ()=>{
			body_overlay.style.opacity = "0";
			body_overlay.style.display = "none";
			alert_wrapper.style.display = "none";
		}











		form.addEventListener("submit", (e)=>{
			e.preventDefault();
		});






		const currencyFormatter = new Intl.NumberFormat(body.dataset.format, {
		    style: 'currency',
		    currency: body.dataset.currency
		});




		let date = new Date().toLocaleString(body.dataset.format, {
			year: 'numeric',
			month: '2-digit',
			day: '2-digit',
			hour: '2-digit',
			minute: '2-digit',
			hour12: true,
		});






		withdraw_button.addEventListener("click", async()=>{
			form.password.required = true;
			form.style.zIndex = "4";
			body_overlay.style.opacity = "0.7";
			body_overlay.style.display = "block";
		});






		continue_button.addEventListener("click", async()=>{

			if(form.password.value != "" && form.password.value != " "){
				body_overlay.style.opacity = "0";
				body_overlay.style.display = "none";
				form.style.zIndex = "-1";


				if(withdraw_button.disabled){

				}else{


					try{
						withdraw_button.disabled = true;
						withdraw_button.textContent = "Loading..."

						const result = await fetch("/investment/withdraw", {

							body: JSON.stringify({
								coil_id: withdraw_button.dataset.coil_id,
								password: form.password.value,
								date
							}),
							headers: {"Content-Type": "application/json"},
							method: "POST"
						});


						const res = await result.json();
						withdraw_button.disabled = false
						withdraw_button.textContent = "Withdraw to Wallet"


						if(res.message === "successful"){
							alert_icon.className = "alert_icon fa-regular fa-circle-check";
							alert_p.textContent = currencyFormatter.format(res.cashout_amount)+ " has been successfully added to your wallet.";

							display_alert()

							alert_cancel.addEventListener("click", ()=>{
								window.location.href = "/main";
							});

							setTimeout(()=>{
								window.location.href = "/main";
							}, 10000);
						
						}else if(res.message === "login needed"){
							alert_icon.className = "alert_icon fa-solid fa-circle-exclamation";
							alert_p.textContent = "Something Went Wrong: for your own safty, we are logging you out... Login and try again.";

							display_alert()

							alert_cancel.addEventListener("click", ()=>{
								window.location.href = "/login";
							});

							setTimeout(()=>{
								window.location.href = "/login";
							}, 8000);
						}else{
							alert_icon.className = "alert_icon fa-solid fa-circle-exclamation";
							alert_p.textContent = res.message;

							display_alert();
						}

					}catch(error){
						alert_icon.className = "alert_icon fa-solid fa-circle-exclamation";
						alert_p.textContent = error.message;

						display_alert();
					};
				}
			};
		});








		const closs_form = ()=>{
			body_overlay.style.opacity = "0";
			body_overlay.style.display = "none";
			form.style.zIndex = "-1";
		}


		body_overlay.addEventListener("click", ()=>{
			closs_form();
		});

		form_cancel.addEventListener("click", ()=>{
			form.password.required = false;
			closs_form();
		});

		window.onscroll = function() {
			closs_form();
		};







		body_overlay.addEventListener("click", ()=>{
			closs_alert();
		});

		alert_cancel.addEventListener("click", ()=>{
			closs_alert();
		});

		window.onscroll = function() {
			closs_alert();
		};

	</script>


</body>
</html>